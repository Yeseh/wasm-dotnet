using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Emit;
using System.Linq;
using System.Collections.Generic;

namespace Wasi.SourceGenerator
{
    [Generator]
    public class Generator : ISourceGenerator
    {
        const string WasiExportAttributeName = "WasiExportAttribute";

        const string WasiImportAttributeName = "WasiImportAttribute";

        enum MethodType
        {
            Import,
            Export
        }

        class WasiMethodSyntaxReceiver : ISyntaxContextReceiver
        {
            public MethodDeclarationSyntax WasiMethod { get; private set; }

            public MethodType MethodType { get; private set; }

            public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
            {
                if (context.Node is MethodDeclarationSyntax methodDeclaration) 
                { 
                    var symbol = (IMethodSymbol)context.SemanticModel.GetDeclaredSymbol(methodDeclaration);
                    var attributes = symbol.GetAttributes();
                    if (!attributes.Any()) { return; }

                    var exportAttribute = attributes.FirstOrDefault(a => a.AttributeClass.Name == WasiExportAttributeName);
                    var importAttribute = attributes.FirstOrDefault(a => a.AttributeClass.Name == WasiImportAttributeName);

                    if (exportAttribute == null && importAttribute == null ) { return; }

                    if (exportAttribute != null)  
                    { 
                        MethodType = MethodType.Export; 

                    }
                    else if (importAttribute != null) { MethodType = MethodType.Import; }
                }
            }
        }

        public void Execute(GeneratorExecutionContext context)
        {
            var source = $@"// <auto-generated/>
void test_fn();
";

            var imports = new List<MethodDeclarationSyntax>();
            var exports = new List<MethodDeclarationSyntax>();

            foreach (var st in context.Compilation.SyntaxTrees)
            {
                var methods = st.GetRoot().DescendantNodes().OfType<MethodDeclarationSyntax>();
                var semanticModel = context.Compilation.GetSemanticModel(st);

                foreach (var m in methods)
                {
                    var symbol = (IMethodSymbol)semanticModel.GetDeclaredSymbol(m);
                    var attributes = symbol.GetAttributes();
                    if (!attributes.Any()) { continue; }

                    if (attributes.Any(a => a.AttributeClass.Name == "WasiExportAttribute"))
                    {
                        exports.Add(m);
                    }

                    foreach (var a in attributes)
                    {
                        if (a.AttributeClass.Name == "WasiExportAttribute")
                        {
                            a.AttributeClass.

                        }
                    }
                }

                foreach (var m in methods) 
                { methodSymbols.Add(m); }
            } 

           context.AddSource($"interop.g.c", source);
        }

        public void Initialize(GeneratorInitializationContext context) 
        {
            context.RegisterForSyntaxNotifications(() => new WasiMethodSyntaxReceiver());
        }
    }
}
