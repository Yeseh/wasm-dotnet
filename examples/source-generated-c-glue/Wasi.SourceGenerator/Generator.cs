using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Emit;
using System.Linq;
using System.IO;
using System.Collections.Generic;

namespace Wasi.SourceGenerator
{
    class WasiMethod
    {
        public string Assembly { get; private set; }
        public string Namespace { get; private set; }
        public string Class { get; private set; }
        public string Name { get; private set; }

        public string FullyQualifiedMethodName => $"{Namespace}.{Class}::{Name}";

        public WasiMethod(
            string assembly,
            string @namespace,
            string @class,
            string methodName)
        {
            Assembly = assembly;
            Namespace = @namespace;
            Class = @class;
            Name = methodName;
        }

    }

    [Generator]
    public class Generator : ISourceGenerator
    {
        const string WasiExportAttributeName = "WasiExportAttribute";

        const string WasiImportAttributeName = "WasiImportAttribute";

        enum MethodType
        {
            Import,
            Export
        }

        class WasiMethodSyntaxReceiver : ISyntaxContextReceiver
        {
            public WasiMethod WasiMethod { get; private set; }

            public MethodType MethodType { get; private set; }

            public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
            {
                if (context.Node is MethodDeclarationSyntax methodDeclaration) 
                { 
                    var symbol = (IMethodSymbol)context.SemanticModel.GetDeclaredSymbol(methodDeclaration);
                    var attributes = symbol.GetAttributes();
                    if (!attributes.Any()) { return; }

                    var exportAttribute = attributes.FirstOrDefault(a => a.AttributeClass.Name == WasiExportAttributeName);
                    var importAttribute = attributes.FirstOrDefault(a => a.AttributeClass.Name == WasiImportAttributeName);

                    if (exportAttribute == null && importAttribute == null ) { return; }

                    WasiMethod = new WasiMethod(
                        symbol.ContainingAssembly.Name, 
                        symbol.ContainingNamespace.Name, 
                        symbol.ContainingType.Name, 
                        symbol.Name);

                    if (exportAttribute != null)  
                    { 
                        MethodType = MethodType.Export;
                        var canExport = symbol.IsStatic;

                        WasiMethod = new WasiMethod(
                            symbol.ContainingAssembly.Name, 
                            symbol.ContainingNamespace.Name, 
                            symbol.ContainingType.Name, 
                            symbol.Name);

                    }
                    else if (importAttribute != null) 
                    { 
                        MethodType = MethodType.Import; 
                    }
                }
            }
        }

        public void Execute(GeneratorExecutionContext context)
        {
            var source = $@"// <auto-generated/>
void test_fn();
";

            File.WriteAllText("interop.c", source);
        }

        public void Initialize(GeneratorInitializationContext context) 
        {
            context.RegisterForSyntaxNotifications(() => new WasiMethodSyntaxReceiver());
        }
    }
}
